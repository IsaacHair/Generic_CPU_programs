/Making a define procedure because it isn’t that hard and improves the code writing immensely
/also make comments better ie ‘/*’ ‘*/’ for comments
/everything is lower case as usual
/note: everything, including variables, in hex
/note: variables are simply used during pre-compiling
/all they do is provide a way to define macros and remember addresses etc
/they don’t define anything for when the program actually runs
/variables begin with ‘x’ and then up to like 128 characters concatenated
/variables can only have letters in them
/all variables used must be declared in segment above where they are used
/write #xvariable to define xvariable
/only type of variable is 16 bit integer
/’+’ and ‘-’ and ‘*’ and ‘/’ and ‘(‘ and ‘)’ and ‘%’ and ‘=’ supported for handling variables
/assignment can occur where the variable is used; “xadr=ffff” is compiled to ‘ffff’
/and xadr now equals ffff
/can use the before mentioned operands on constants as well or a mix of variable/constants
/spaces mark the end of a section and movement to the next section
/macros begin with { and end with }, label for macro begins with . and can be only letters
/IMPORTANT: all variables are global, so no variables have to be passed to macros
/macros can nest but avoid infinite loops because this will lead to infinite compile time
/compiler buffers macros, then inserts them,
/then continues until no macros are left
/note: there are now three types of code
/function block begins with # like macros
/but the function is written without a dot at the beginning, again only text
/first is simply raw machine code
/second is macros
/third is compiler use only code for variable manipulation and loops, etc
/compiler use only includes operands from before and macro calls and if statement
/also includes > and <
/tab delineation for nested statements
/compiler use only functions start with [ and ends with ]
/macros can be called from all modes but machine code is only in machine language and “if” “<” and “>” is only in function language
/note: need raw machine code as this is where program is actually written
/you can call macros here, but simply defining the macro does not mean that it is actually used
/even if it is used in other macros
/see next page!!!!!!

{.readpath
#xa
#xb
#xc
#xstart}

/*************************/
/OMG OMG OMG instead, you should write everything in C
/defaults to c code
/to switch to machine code, type “<” on a new line then ‘\n’
/to switch back, type “>” on a new line then ‘\n’
/user defines how machine code is written to another file
/so, the entire program is a protocol for writing the machine code rather than the program itself
/steps:
/write program with mixed c and machine code
/convert to c program (ie add in fprintf’s for machine code
/and protocol for outputting to a file) using ctv
/compile using linux c compiler to linux binary
/execute linux binary to create .vsb file
/assemble this file using vas
/upload using arduino and vrs
/remember: c program does not define the vsp8 program
/rather, c program defines HOW to write the vsp8 program
/could also add in labels if you wanted for the program addresses

/compiler handles program addresses
/you can add labels if you want, define with @
/should probably eliminate type specifics, just have to make sure you don’t define
/something as, for example, a label and as a variable
/also don’t call things “adr” or “buf” because those are already op-codes

/also need logical ^ & << or maybe not since c code for all
/go-to's pointers are overwritten as go down in code if re-define where they point


/******PROGRAM

int main() {
	int x;
	int y;
	for (x = 0; x < 8; x++) {
		<
		/24 lines so far
		adr0 ffff
		adr1 ff00+x
		buf0 0000
		>
	}
	<
	@path
	adr0 ffff
	adr1 c000
	buf0 0000
	>
	for (x = 0; x < 8; x++) {
		<
		@path-x
		adr0 ffff
		adr1 ff00+x
		pathjump
		>
	}
	<
	@pathjump
	jmpr 0000
	put-0 /value is zero
	put-1 /value is one
	>
	for (y = 0; y < 2; y++) {
		<
		@put-y
		adr0 ffff
		adr1 8000
		>
		for (x = 0; x <= 8; x++) {
			<
			adr1 4000
			jmpr 0000
			stop-y-x
			continue-y-x
			@stop-y-x
			buf1 0000
			adr0 4000
			buf-y 0000
			adr1 4800+((1<<(3+x))*y)
			buf0 0000
			path-(x+1)
			@continue-y-x
			adr0 4000
			jmpr 0000
			cont-end-y-x
			buf1 ((1<<(3+x))*y)
			@cont-end-y-x
			>
		}
	}
}